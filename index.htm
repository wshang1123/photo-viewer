<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Photo Viewer</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      background: #000;
    }

    .slider {
      display: flex;
      width: 2400vw;
      height: 100vh;
      transition: transform 0.3s ease;
      touch-action: none;
    }

    .slide {
      min-width: 100vw;
      height: 100vh;
      display: flex;
      justify-content: center;
      align-items: center;
      overflow: hidden;
    }

    .slide img {
      max-width: 100%;
      max-height: 100%;
      object-fit: contain;
      background-color: #000;
      transition: transform 0.2s ease;
      touch-action: none;
    }
  </style>
</head>
<body>
  <div id="slider" class="slider">
    <div class="slide"><img src="photo01.jpg" alt="Photo 1" /></div>
    <div class="slide"><img src="photo02.jpg" alt="Photo 2" /></div>
    <div class="slide"><img src="photo03.jpg" alt="Photo 3" /></div>
    <div class="slide"><img src="photo04.jpg" alt="Photo 3" /></div>
    <div class="slide"><img src="photo05.jpg" alt="Photo 1" /></div>
    <div class="slide"><img src="photo06.jpg" alt="Photo 2" /></div>
    <div class="slide"><img src="photo07.jpg" alt="Photo 3" /></div>
    <div class="slide"><img src="photo08.jpg" alt="Photo 3" /></div>
    <div class="slide"><img src="photo09.jpg" alt="Photo 1" /></div>
    <div class="slide"><img src="photo10.jpg" alt="Photo 2" /></div>
    <div class="slide"><img src="photo11.jpg" alt="Photo 3" /></div>
    <div class="slide"><img src="photo12.jpg" alt="Photo 3" /></div>
    <div class="slide"><img src="photo13.jpg" alt="Photo 1" /></div>
    <div class="slide"><img src="photo14.jpg" alt="Photo 2" /></div>
    <div class="slide"><img src="photo15.jpg" alt="Photo 3" /></div>
    <div class="slide"><img src="photo16.jpg" alt="Photo 3" /></div>
    <div class="slide"><img src="photo17.jpg" alt="Photo 1" /></div>
    <div class="slide"><img src="photo18.jpg" alt="Photo 2" /></div>
    <div class="slide"><img src="photo19.jpg" alt="Photo 3" /></div>
    <div class="slide"><img src="photo20.jpg" alt="Photo 3" /></div>
    <div class="slide"><img src="photo21.jpg" alt="Photo 1" /></div>
    <div class="slide"><img src="photo22.jpg" alt="Photo 2" /></div>
    <div class="slide"><img src="photo23.jpg" alt="Photo 3" /></div>
    <div class="slide"><img src="photo24.jpg" alt="Photo 3" /></div>
    
  </div>

  <script>
    const slider = document.getElementById('slider');
    const slides = slider.children;
    slider.style.width = `${slides.length * 100}vw`;



let startX = 0;
    let currentIndex = 0;
    let scale = 1;
    let panX = 0;
    let panY = 0;
    let lastTouchX = 0;
    let lastTouchY = 0;
    let initialDistance = null;
    let lastTap = 0;
    let velocityX = 0;
    let velocityY = 0;
    let lastMoveTime = 0;
    let momentumFrame = null;

    function resetZoom() {
      const img = slides[currentIndex].querySelector('img');
      scale = 1;
      panX = 0;
      panY = 0;
      img.style.transform = `translate(0px, 0px) scale(1)`;
      img.style.transformOrigin = 'center center';
    }

    function getDistance(touch1, touch2) {
      const dx = touch2.clientX - touch1.clientX;
      const dy = touch2.clientY - touch1.clientY;
      return Math.sqrt(dx * dx + dy * dy);
    }

    function clampPan(img) {
      const rect = img.getBoundingClientRect();
      const maxPanX = (rect.width * scale - window.innerWidth) / 2;
      const maxPanY = (rect.height * scale - window.innerHeight) / 2;

      panX = Math.max(-maxPanX, Math.min(panX, maxPanX));
      panY = Math.max(-maxPanY, Math.min(panY, maxPanY));
    }

    function applyMomentum() {
      const friction = 0.95;
      const threshold = 0.1;
      const img = slides[currentIndex].querySelector('img');

      function step() {
        panX += velocityX * 16;
        panY += velocityY * 16;

        velocityX *= friction;
        velocityY *= friction;

        clampPan(img);
        img.style.transform = `translate(${panX}px, ${panY}px) scale(${scale})`;

        if (Math.abs(velocityX) > threshold || Math.abs(velocityY) > threshold) {
          momentumFrame = requestAnimationFrame(step);
        } else {
          cancelAnimationFrame(momentumFrame);
        }
      }

      momentumFrame = requestAnimationFrame(step);
    }

    slider.addEventListener('touchstart', (e) => {
      if (momentumFrame) {
        cancelAnimationFrame(momentumFrame);
        momentumFrame = null;
      }

      if (e.touches.length === 1) {
        startX = e.touches[0].clientX;
        lastTouchX = e.touches[0].clientX;
        lastTouchY = e.touches[0].clientY;
        lastMoveTime = Date.now();
      } else if (e.touches.length === 2) {
        initialDistance = getDistance(e.touches[0], e.touches[1]);
        const rect = slider.getBoundingClientRect();
        const midX = (e.touches[0].clientX + e.touches[1].clientX) / 2 - rect.left;
        const midY = (e.touches[0].clientY + e.touches[1].clientY) / 2 - rect.top;
        const img = slides[currentIndex].querySelector('img');
        img.style.transformOrigin = `${midX}px ${midY}px`;
      }
    }, { passive: false });

    slider.addEventListener('touchmove', (e) => {
      const img = slides[currentIndex].querySelector('img');

      if (e.touches.length === 2) {
        e.preventDefault();
        const newDistance = getDistance(e.touches[0], e.touches[1]);
        const zoomFactor = newDistance / initialDistance;
        scale = Math.min(Math.max(zoomFactor, 1), 3);
        clampPan(img);
        img.style.transform = `translate(${panX}px, ${panY}px) scale(${scale})`;
      } else if (e.touches.length === 1 && scale > 1) {
        e.preventDefault();
        const touchX = e.touches[0].clientX;
        const touchY = e.touches[0].clientY;
        const now = Date.now();

        const dx = touchX - lastTouchX;
        const dy = touchY - lastTouchY;
        const dt = now - lastMoveTime || 16;

        velocityX = dx / dt;
        velocityY = dy / dt;

        panX += dx;
        panY += dy;

        clampPan(img);
        img.style.transform = `translate(${panX}px, ${panY}px) scale(${scale})`;

        lastTouchX = touchX;
        lastTouchY = touchY;
        lastMoveTime = now;
      }
    }, { passive: false });

    slider.addEventListener('touchend', (e) => {
      const img = slides[currentIndex].querySelector('img');

      if (e.changedTouches.length === 1 && scale === 1) {
        const endX = e.changedTouches[0].clientX;
        const diff = startX - endX;

        if (Math.abs(diff) > 50) {
          if (diff > 0 && currentIndex < slides.length - 1) {
            currentIndex++;
          } else if (diff < 0 && currentIndex > 0) {
            currentIndex--;
          }
          slider.style.transform = `translateX(-${currentIndex * 100}vw)`;
          resetZoom();
        }
      }

      // Double-tap to zoom
      const currentTime = new Date().getTime();
      const tapLength = currentTime - lastTap;
      if (tapLength < 300 && tapLength > 0) {
        scale = scale === 1 ? 2 : 1;
        panX = 0;
        panY = 0;
        clampPan(img);
        img.style.transform = `translate(${panX}px, ${panY}px) scale(${scale})`;
        img.style.transformOrigin = 'center center';
      }
      lastTap = currentTime;

      if (scale > 1) {
        applyMomentum();
      }
    });

    slider.style.transform = `translateX(0vw)`;
  </script>
</body>
</html>
